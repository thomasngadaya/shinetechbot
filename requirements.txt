from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import os

app = Flask(__name__)

BOT_TOKEN = "7629093125:AAGOesJNygyr-iAbAWHIIDac6HvZxofKtYI"
PAYMENT_NAME = "shinetechnology"

# Malipo
PRICES = {
    "day": 10000,
    "3days": 20000,
    "week": 30000,
    "month": 50000,
    "3months": 120000,
    "year": 500000
}

PAYMENT_METHODS = [
    ("Airtel", "airtel"),
    ("Tigo", "tigo"),
    ("TTCL", "ttcl"),
    ("Vodacom", "vodacom"),
    ("Bitcoin", "btc"),
    ("TRX", "trx"),
    ("USDT", "usdt")
]

PAYMENT_NUMBERS = {
    "airtel": "0686823297",
    "tigo": "0654542433",
    "ttcl": "0613542433",
    "vodacom": "0756196420",
    "btc": "bc1ql0x8j6rqcp5hr9x7hzts98phxsn84pmrvtla5s",
    "trx": "TSgtTsmabWghWgXnYU765NG3HCKwmLkrtg",
    "usdt": "0x528581c64e39015b371b7d6b2f1a2605821c8170"
}

user_free_rounds = {}

# Telegram Start Command
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_free_rounds:
        user_free_rounds[user_id] = 5
    update.message.reply_text(f"Karibu kwenye bot ya Aviator Predictions kutoka {PAYMENT_NAME}!\n\nUmepewa predictions 5 bure.")

# Predictions (demo)
def prediction(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_free_rounds.get(user_id, 0) > 0:
        user_free_rounds[user_id] -= 1
        update.message.reply_text(f"Round ya bure. Zilizobaki: {user_free_rounds[user_id]}.\nCrash point: 2.70x")
        if user_free_rounds[user_id] == 0:
            send_payment_options(update, context)
    else:
        send_payment_options(update, context)

# Payment options

def send_payment_options(update, context):
    buttons = [
        [InlineKeyboardButton("1 Day - 10,000 TZS", callback_data="sub_day")],
        [InlineKeyboardButton("3 Days - 20,000 TZS", callback_data="sub_3days")],
        [InlineKeyboardButton("Week - 30,000 TZS", callback_data="sub_week")],
        [InlineKeyboardButton("Month - 50,000 TZS", callback_data="sub_month")],
        [InlineKeyboardButton("3 Months - 120,000 TZS", callback_data="sub_3months")],
        [InlineKeyboardButton("Year - 500,000 TZS", callback_data="sub_year")]
    ]
    update.message.reply_text("Chagua kifurushi kuendelea:", reply_markup=InlineKeyboardMarkup(buttons))

def subscription_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    plan = query.data.replace("sub_", "")
    context.user_data['selected_plan'] = plan
    amount = PRICES[plan]

    buttons = [
        [InlineKeyboardButton(name, callback_data=f"pay_{method}")] for name, method in PAYMENT_METHODS
    ]
    query.edit_message_text(
        f"Umechagua kifurushi cha {plan} kwa TZS {amount}.\nChagua njia ya malipo:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

def payment_method_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    method = query.data.replace("pay_", "")
    plan = context.user_data.get('selected_plan')
    amount = PRICES[plan]
    pay_to = PAYMENT_NUMBERS[method]

    query.edit_message_text(
        f"Lipa TZS {amount} kwa njia ya {method.upper()}\nNamba au Address: `{pay_to}`\n\n⚠️ Tafadhali weka namba yako ya siri kuthibitisha. Huduma: {PAYMENT_NAME}"
        , parse_mode="Markdown")

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("prediction", prediction))
    dp.add_handler(CallbackQueryHandler(subscription_callback, pattern="^sub_"))
    dp.add_handler(CallbackQueryHandler(payment_method_callback, pattern="^pay_"))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()

# Flask endpoint (if needed for hosting)
@app.route("/")
def home():
    return "Shinetechnology Bot Active"

if __name__ == '__main__':
    app.run(debug=True)
